# Chap15 간단한 웹 어플리케이션 구조
## 웹 어플리케이션의 구성 요성
웹 어플리케이션을 개발할 때 사용하는 전형적인 구조는 다음 요소를 포함한다.
- 프론트 서블릿
- 컨트롤러 + 뷰
- 서비스
- DAO

프론트 서블릿은 웹 브라우저의 모든 요청을 받는 창구 역할을 한다. 프론트 서블릿은 요청을 분석해서 알맞은 컨트롤러에 전달한다. 스프링 MVC에서는 DispatcherServlet이 프론트 서블릿의 역할을 수행한다.![](https://velog.velcdn.com/images/yh_lee/post/1b79cbf2-11fa-44b0-a4fa-d322e0ff7be3/image.png)컨트롤러는 실제 웹 브라우저의 요청을 처리한다. 지금까지 구현해본 스프링 컨트롤러가 이에 해당한다. 컨트롤러는 클라이언트(브라우저)의 요청을 처리하기 위해 알맞은 기능을 실행하고 그 결과를 뷰에 전달한다. 
#### 컨트롤러의 주요 역할
- 클라이언트가 요구한 기능을 실행
- 응답 결과를 생성하는데 필요한 모델 생성
- 응답 결과를 생성할 뷰 선택

컨트롤러는 로직 실행을 서비스에 위임한다. 컨트롤러는 어플리케이션이 제공하는 기능과 사용자 요청을 연결하는 매개체이고, 기능 제공을 위한 로직을 직접 수행하지는 않는다. 앞에서 작성했던 ChangePasswordController의 경우 아래 코드처럼 ChangePasswordService에 비밀번호 변경 처리를 위임했다.
```java
@PostMapping
public String submit(
		@ModelAttribute("command") ChangePwdCommand pwdCmd, 
        Errors errors, 
        HttpSession session){
		
	new ChangePwdCommandValidator().validate(pwdCmd, errors);
    if(errors.hasErrors()){
    	return "edit/changePwdForm";
    }	
    AuthInfo authInfo = (AuthInfo) session.getAttribute("authInfo");
    try{
    	//컨트롤러는 로직 실행을 서비스에 위임
        changePasswordService.changePassword(
        		authInfo.getEmail(),
                pwdCmd.getCurrendPassword(),
                pwdCmd.getNewPassword());
                
        return "edit/changePwd";
    }catch(IdPasswordNotMatchingException e){
    	errors.rejectValue("currentPassword", "notMatching");
        return "edit/changePwdForm";
    }
}
```
서비스는 기능의 로직을 구현한다. 서비스는 DB 연동이 필요하면 DAO(Data Access Object)를 사용한다. DB와 웹 어플리케이션 간에 데이터를 이동시켜 주는 역할을 한다.